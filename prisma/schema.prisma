generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  //By default, the JSON Schema that's generated will output only objects for related model records. If set to "true", this will cause the generator to also output foreign key fields for related records
  // keepRelationScalarFields = "true"

  //Add an id to the generated schema. All references will include the schema id
  // schemaId = "some-schema-id"

  //If this flag is "true" all required scalar prisma fields that do not have a default value, will be added to the required properties field for that schema definition.
  // includeRequiredFields = "true"

  // If this flag is "true" the original type will be outputed under the property key "originalType"
  // persistOriginalType = "true"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String?           @unique @db.VarChar(64)
  password        String?
  emailVerified   DateTime?         @map("email_verified")
  image           String?
  firstName       String?           @map("first_name") @db.VarChar(32)
  isActive        Boolean           @default(true)
  lastName        String?           @map("last_name") @db.VarChar(32)
  role            Role              @default(NEW_STUDENT)
  sex             String?           @db.VarChar(1)
  accounts        Account[]
  ActivationToken ActivationToken[]   
  applications    Application[]
  Session         Session[]
  friendList      String[]        @map("friend_list")
  createdAt       DateTime          @default(now())
  favorites       String[] // Array of favorite item IDs
  notifications   Notification[]
  posts           Post[]
  comments        Comment[]
  likes           like[]
  @@map("users")
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  authorId  String    @map("author_id")
  likesCount     Int       @default(0)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  ikes     like[]
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model like {
  id        String   @id @default(cuid())
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])

  @@map("likes")
}

model Notification {
  id        String             @id @default(cuid())
  content   String
  createdAt DateTime           @default(now())
  readAt    DateTime?
  status    NotificationStatus @default(UNREAD)
  userId    String             @map("user_id")
  user      User               @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum NotificationStatus {
  READ
  UNREAD
}

model ActivationToken {
  id          String    @id @default(cuid())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  @@map("activation_tokens")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model University {
  id            String         @id @default(cuid())
  name          String
  location      String
  studyPrograms StudyProgram[]

  @@map("universities")
}

model StudyProgram {
  id                   String                @id @default(cuid())
  name                 String
  description          String
  startDate            String?
  degreeType           String
  attendance           String
  paymentCycle         String                @map("payment_cycle")
  studyProgramLink     String?               @map("study_program_link")
  universityId         String                @map("university_id")
  tuitionFee           Int?                  @map("tuition_fee")
  IELTSScore           Float?                @map("IELTS_score")
  TOEFLScore           Int?                  @map("TOEFL_score")
  duration             Float?
  applyDate            String?               @map("apply_date")
  studyProgramLanguage studyProgramLanguage  @default(EN) @map("study_program_language")
  format               String[]
  applications         Application[]
  discipline           DisciplineOnProgram[]
  university           University            @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@map("study_programs")
}

model Discipline {
  id                  String                @id @default(cuid())
  name                String
  disciplineOnProgram DisciplineOnProgram[]

  @@map("disciplines")
}

model DisciplineOnProgram {
  disciplineId   String       @map("discipline_id")
  studyProgramId String       @map("study_program_id")
  discipline     Discipline   @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  studyProgram   StudyProgram @relation(fields: [studyProgramId], references: [id], onDelete: Cascade)

  @@id([disciplineId, studyProgramId])
  @@map("disciplines_on_programs")
}

model Application {
  // Fields for the application form
  id                    String                 @id @default(cuid())
  studyProgramId        String                 @map("study_program_id")
  userId                String                 @map("user_id")
  studyProgram          StudyProgram           @relation(fields: [studyProgramId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents             Document[]
  personalInfo          PersonalInfo?
  educationalBackground EducationalBackground?
  userConsent           Boolean                @default(false) @map("user_consent")

  @@unique([studyProgramId, userId])
  @@map("applications")
}


model Document {
  id            String      @id @default(cuid())
  link          String?
  applicationId String      @map("application_id")
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model PersonalInfo {
  nativeLanguage      String
  languageProficiency EnglishLevel
  id                  String       @id @default(cuid())
  firstName           String
  lastName            String
  email               String
  phoneNumber         String?
  dateOfBirth         DateTime
  nationality         String
  applicationId       String       @unique @map("application_id")
  application         Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("personal_infos")
}

enum EnglishLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

model EducationalBackground {
  id                   String               @id @default(cuid())
  applicationId        String               @unique @map("application_id")
  highestQualification highestQualification @map("highest_qualification")
  institutionName      String
  graduationYear       Int
  application          Application          @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("educational_backgrounds")
}

enum highestQualification {
  HighSchool
  Bachelor
  Master
  PhD
}

enum Role {
  NEW_STUDENT
  ACCEPTED_STUDENT
  COMMUNITY_ANGEL
  ADMIN
}

enum studyProgramLanguage {
  EN
  PL
}

enum searchQueryParamKeys {
  TuitionFees
  Duration
  Discipline
  Format
  Attendance
  Degree
}
