generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String?           @unique @db.VarChar(64)
  password        String?
  emailVerified   DateTime?         @map("email_verified")
  image           String?
  firstName       String?           @map("first_name") @db.VarChar(32)
  isActive        Boolean           @default(true)
  lastName        String?           @map("last_name") @db.VarChar(32)
  role            Role              @default(NEW_STUDENT)
  sex             String?           @db.VarChar(1)
  applications    Application[]
  accounts        Account[]
  ActivationToken ActivationToken[]
  Session         Session[]

  @@map("users")
}

model ActivationToken {
  id          String    @id @default(cuid())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  @@map("activation_tokens")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model University {
  id            String         @id @default(cuid())
  name          String
  location      String
  studyPrograms StudyProgram[]
}

model StudyProgram {
  id                   String                @id @default(cuid())
  name                 String
  description          String
  startDate            String?
  studyProgramLanguage studyProgramLanguage  @default(EN)
  degreeType           String
  format               String
  attendance           String
  applyDate            String?
  paymentCycle         String                @map("payment_cycle")
  studyProgramLink     String?               @map("study_program_link")
  universityId         String                @map("university_id")
  tuitionFee           Int?                  @map("tuition_fee")
  IELTSScore           Float?                @map("IELTS_score")
  TOEFLScore           Int?                  @map("TOEFL_score")
  duration             Float?
  applications         Application[]
  discipline           DisciplineOnProgram[]
  university           University            @relation(fields: [universityId], references: [id], onDelete: Cascade)
}

model Discipline {
  id            String                @id @default(cuid())
  name          String
  studyPrograms DisciplineOnProgram[]
}

model DisciplineOnProgram {
  disciplineId   String       @map("discipline_id")
  studyProgramId String       @map("study_program_id")
  discipline     Discipline   @relation(fields: [disciplineId], references: [id])
  studyProgram   StudyProgram @relation(fields: [studyProgramId], references: [id], onDelete: Cascade)

  @@id([disciplineId, studyProgramId])
}

model Application {
  id             String       @id @default(cuid())
  studyProgramId String       @map("study_program_id")
  userId         String       @map("user_id")
  studyProgram   StudyProgram @relation(fields: [studyProgramId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  documents      Document[]
  forms          Form[]
}

model Form {
  id            String      @id @default(cuid())
  applicationId String      @map("application_id")
  application   Application @relation(fields: [applicationId], references: [id])
}

model Document {
  id            String      @id @default(cuid())
  applicationId String      @map("application_id")
  application   Application @relation(fields: [applicationId], references: [id])
}

enum Role {
  NEW_STUDENT
  ACCEPTED_STUDENT
  COMMUNITY_ANGEL
  ADMIN
}

enum studyProgramLanguage {
  EN
  PL
}
